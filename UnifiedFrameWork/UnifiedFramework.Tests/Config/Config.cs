//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyProjectNamespace
{
    using  System;
    using  System.Collections.Generic;
    using  System.Linq;
    using  System.Text;
    using  System.Threading.Tasks;
    using  OpenQA.Selenium;
    using  OpenQA.Selenium.IE;
    using  OpenQA.Selenium.Support.UI;
    using  Microsoft.VisualStudio.TestTools.UnitTesting;
    using  System.Diagnostics;
    using  System.IO;
    using  System.Configuration;
    using  System.Threading;
    using  RelevantCodes.ExtentReports;
    using  UnifiedFrameWork.ControllerLayer;
    using  System.Text.RegularExpressions;
    using  Winium.Desktop.Driver;
    
    
    public class Config
    {
        
        public static OpenQA.Selenium.IWebDriver driver;
        
        public static string textFile;
        
        public static RelevantCodes.ExtentReports.ExtentReports customReport;
        
        public static RelevantCodes.ExtentReports.ExtentTest customTestLog;
        
        public static OpenQA.Selenium.Support.UI.WebDriverWait wait;
        
        public static List<RelevantCodes.ExtentReports.ExtentTest> customLogCollection;
        
        public virtual RelevantCodes.ExtentReports.ExtentReports Instance
        {
            get
            {
                if (customReport==null)
                {
                    string reportFilePath = UnifiedFrameWork.ControllerLayer.DirectoryHandler.DirectoryCreation("UnifiedReport");
                    customReport= new ExtentReports(Path.Combine(reportFilePath,"UnifiedReports"+".html"), true);
                    customReport.Config().DocumentTitle("UReportsTitle").ReportName("UnifiedReports").ReportHeadline("UReportsHeadline");
                }
                return customReport;
            }
        }
        
        [TestInitialize()]
        public void TestIntialise()
        {
            #region Code Injection
            ClearBrowser();
            string ieServerFilePath = Path.Combine(Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName, "UnifiedTools", "IEWebDriver");
            driver = WebControlConfiguration.IWebDriverConfig(ieServerFilePath);
            driver.Manage().Window.Maximize();
            driver.Manage().Cookies.DeleteAllCookies();
            wait = WebControlConfiguration.ExplicitWaitConfig(driver, 60);
            customReport = Instance;
            customLogCollection = new List<ExtentTest>();
            WiniumDriver.WiniumInitiate();
            #endregion
        }
        
        [TestCleanup()]
        public void TestCleanUp()
        {
            #region Code Injection
	    for (int i = 0; i < customLogCollection.Count; i++)
            {
                if (customLogCollection[i] != null)
                {
                    customReport.EndTest(customLogCollection[i]);
                    customReport.Flush();
                    customLogCollection[i] = null;
                }
            }
            customLogCollection.Clear();
            WiniumDriver.WiniumFinalise();
            driver.Dispose();
            ClearBrowser();
            #endregion
        }
        
        public void ClearBrowser()
        {
            #region Code Injection
            Console.Write("Parent Class");
            Process p = new Process();
            ProcessStartInfo ps = new ProcessStartInfo();
            ps.FileName = "cmd.exe";
            ps.Arguments = "/C RunDll32.exe InetCpl.cpl,ClearMyTracksByProcess 4351";
            p.StartInfo = ps;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.Start();
            p.WaitForExit(30000);
            Process[] processlist = Process.GetProcesses();
            foreach (Process theprocess in Process.GetProcesses())
            {
                if (theprocess.ProcessName == "iexplore")
                {
                    theprocess.Kill();
                }
            }
            #endregion
        }
    }
}
